package ch.wsl.box.client.views

import ch.wsl.box.client.services.{ClientConf, Labels, LoginPopup, Notification, REST, UI}
import io.udash._
import ch.wsl.box.client._
import org.scalajs.dom.Element
import scalatags.JsDom.tags2.main
import ch.wsl.box.client.views.components._
import io.udash.bootstrap.BootstrapStyles
import io.udash.core.Presenter
import scalacss.ScalatagsCss._


case class RootViewModel(layout:String)
object RootViewModel extends HasModelPropertyCreator[RootViewModel] {
  implicit val blank: Blank[RootViewModel] =
    Blank.Simple(RootViewModel(Layouts.std))
}

case object RootViewPresenter extends ViewFactory[RootState]{


  override def create(): (View, Presenter[RootState]) = {

    val prop = ModelProperty.blank[RootViewModel]

    (new RootView(prop),new RootPresenter(prop))
  }
}

class RootPresenter(viewModel:ModelProperty[RootViewModel]) extends Presenter[RootState] {



  override def handleState(state: RootState): Unit = {
    viewModel.set(RootViewModel(state.layout))
  }
}

class RootView(viewModel:ModelProperty[RootViewModel]) extends ContainerView {
  import scalatags.JsDom.all._
  import io.udash.css.CssView._
  import Context._

  private val child: Element = div().render


  private val notifications = div(ClientConf.style.notificationArea,
    produce(Notification.list){ notices =>
      notices.map { notice =>
        div(ClientConf.style.notification, notice).render
      }
    }
  )


  private val loading = showIf(services.clientSession.loading) {
    div(ClientConf.style.loading,
      raw(
        s"""
          |<div class="loadingio-spinner-ripple-70e2hrz6twv"><div class="ldio-yj9u9ya1q5l">
          |<div></div><div></div>
          |</div></div>
          |<style type="text/css">
          |@keyframes ldio-yj9u9ya1q5l {
          |  0% {
          |    top: 96px;
          |    left: 96px;
          |    width: 0;
          |    height: 0;
          |    opacity: 1;
          |  }
          |  100% {
          |    top: 18px;
          |    left: 18px;
          |    width: 156px;
          |    height: 156px;
          |    opacity: 0;
          |  }
          |}.ldio-yj9u9ya1q5l div {
          |  position: absolute;
          |  border-width: 4px;
          |  border-style: solid;
          |  opacity: 1;
          |  border-radius: 50%;
          |  animation: ldio-yj9u9ya1q5l 1s cubic-bezier(0,0.2,0.8,1) infinite;
          |}.ldio-yj9u9ya1q5l div:nth-child(1) {
          |  border-color: #ffffff;
          |  animation-delay: 0s;
          |}
          |.ldio-yj9u9ya1q5l div:nth-child(2) {
          |  border-color: ${ClientConf.colorMain};
          |  animation-delay: -0.5s;
          |}
          |.loadingio-spinner-ripple-70e2hrz6twv {
          |  width: 200px;
          |  height: 200px;
          |  display: inline-block;
          |  overflow: hidden;
          |  background: rgba(NaN, NaN, NaN, 0);
          |}
          |.ldio-yj9u9ya1q5l {
          |  width: 100%;
          |  height: 100%;
          |  position: relative;
          |  transform: translateZ(0) scale(1);
          |  backface-visibility: hidden;
          |  transform-origin: 0 0; /* see note above */
          |}
          |.ldio-yj9u9ya1q5l div { box-sizing: content-box; }
          |/* generated by https://loading.io/ */
          |</style>
          |""".stripMargin),br,br,
      Labels.navigation.loading
    ).render
  }


  private def content = produce(viewModel.subProp(_.layout)) {
      case Layouts.std => {
        div(BootstrapStyles.containerFluid)(
          Header.navbar(UI.title),
          notifications,
          main(ClientConf.style.fullHeight)(
            div()(
              child
            )
          ),
          Footer.template(UI.logo),
          LoginPopup.render
        ).render
      }
      case Layouts.blank => div(BootstrapStyles.containerFluid,overflowX.hidden)(
        notifications,
        child
      ).render
    }



  override def getTemplate: Modifier = div(
    loading,
    content
  )

  override def renderChild(view: Option[View]): Unit = {
    import io.udash.wrappers.jquery._
    jQ(child).children().remove()
    view.foreach(_.getTemplate.applyTo(child))
  }
}
